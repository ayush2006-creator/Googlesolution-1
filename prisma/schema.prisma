generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String             @id @default(uuid()) @db.Uuid
  email              String             @unique
  password           String
  username           String             
  isTherapistFriend  Boolean          @default(false)
  createdAt          DateTime           @default(now())
  streak             Streak?            @relation("UserStreaks")
  friendships        Friendships[]      @relation("UserFriendships")
  inverseFriendships Friendships[]      @relation("InverseUserFriendships")
  blogs              Blog[]
  therapist          Therapist?
  TherapistRequest   TherapistRequest[]
  image              String? 
  milestones         Milestones[]  
  bookmarks         Bookmarks[]
  comments          Comments[]           
}

model Milestones{
  id        String   @id @default(uuid()) @db.Uuid
  userId    String   @db.Uuid
  title     String
  
  createdAt DateTime @default(now())
 
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Therapist {
  id               String             @id @default(uuid()) @db.Uuid
  email            String             @unique
  password         String
  createdAt        DateTime           @default(now())
  userId           String?            @unique @db.Uuid
  user             User?              @relation(fields: [userId], references: [id])
  TherapistRequest TherapistRequest[]
}

model TherapistRequest {
  id          String        @id @default(uuid()) @db.Uuid
  therapistId String        @db.Uuid
  userId      String        @db.Uuid
  status      RequestStatus @default(PENDING)
  therapist   Therapist     @relation(fields: [therapistId], references: [id])
  user        User          @relation(fields: [userId], references: [id])
}

model Streak {
  id            String   @id @default(uuid()) @db.Uuid
  userId        String   @unique @db.Uuid
  currentStreak Int      @default(0)
  longestStreak Int      @default(0)
  lastCheckin   DateTime
  user          User     @relation("UserStreaks", fields: [userId], references: [id], onDelete: Cascade)
}

model Friendships {
  id        String        @id @default(uuid()) @db.Uuid
  userId    String        @db.Uuid
  friendId  String        @db.Uuid
  user      User          @relation("UserFriendships", fields: [userId], references: [id], onDelete: Cascade)
  friend    User          @relation("InverseUserFriendships", fields: [friendId], references: [id], onDelete: Cascade)
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  status    RequestStatus @default(PENDING)

  @@index([userId])
  @@index([friendId])
}

model Blog {
  id        String   @id @default(uuid()) @db.Uuid
  title     String
  content   String
  authorId  String   @db.Uuid
  likes     Int      @default(0)
  createdAt DateTime @default(now())
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  comments  Comments[]
  bookmarks Bookmarks[]
}
model Comments {
  id        String   @id @default(uuid()) @db.Uuid
  blogId    String   @db.Uuid
  userId    String   @db.Uuid
  content   String
  createdAt DateTime @default(now())
  blog      Blog     @relation(fields: [blogId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([blogId])
  @@index([userId])
}
model Bookmarks {
  userId    String   @db.Uuid
  blogId    String   @db.Uuid
  blog      Blog     @relation(fields: [blogId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@id([userId, blogId])
  @@index([blogId])
  @@index([userId])
}


enum RequestStatus {
  PENDING
  ACCEPTED
  REJECTED
}
